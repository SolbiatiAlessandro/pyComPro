import unittest
import l456


class testSolution(unittest.TestCase):
    
    def setUp( self ):
        self.s = l456.Solution()

    def test_solution( self ):
        matrix =  [[1,   2,   2,   3,   5],
                     [3,   2,   3,   4,   4]  ,
                     [2,   4,   5,   3,   1]  ,
                     [6,   7,   1,   4,   5]  ,
                     [5,   1,   1,   2,   4]]
        got = self.s.pacificAtlantic(matrix)
        self.assertItemsEqual(got, [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]])
        
        got = self.s.pacificAtlantic([])
        self.assertEqual(got, [])

    def test_profile(self):
        from time import time

        matrix= [[1]*150]*150
        t1 = time()
        got = self.s.pacificAtlantic(matrix)
        t2 = time()
        print t2 - t1

        matrix= [[14,2,12,2,12,19,14,2,2,1,2,8,14,5,2,19,12,17,4,9,2,13,7,19,19,13,5,15,14,8,8,14,3,2,12,14,2,7,5,7,9],[19,16,15,6,14,16,0,17,9,11,1,4,15,4,5,9,15,9,11,8,19,10,0,18,6,9,11,14,4,11,15,0,2,8,8,4,5,19,0,16,3],[14,5,2,17,14,7,9,0,14,12,3,7,2,16,17,3,11,19,11,2,5,6,10,11,6,17,8,6,10,12,0,0,13,13,7,13,5,7,19,18,11],[1,2,7,9,1,18,5,18,17,17,14,15,3,0,6,3,9,15,2,2,19,4,12,10,18,12,17,19,18,18,15,8,12,9,0,11,3,3,4,10,16],[17,15,1,18,7,6,6,16,8,4,3,18,1,2,10,10,19,9,1,3,16,12,14,8,1,8,8,7,6,19,0,14,6,18,2,4,9,4,15,10,8],[5,12,8,8,12,10,2,19,3,2,7,12,0,15,13,14,9,7,1,4,8,6,6,8,17,11,17,3,0,6,7,6,7,18,2,11,8,0,6,9,9],[4,13,17,1,9,3,6,7,5,0,6,9,18,8,8,18,0,0,17,10,19,7,14,0,1,7,19,7,14,7,11,10,12,14,9,1,10,14,3,8,5],[0,10,15,15,4,10,16,8,13,7,6,6,1,5,3,8,12,16,9,11,11,17,14,14,13,6,9,0,2,13,10,12,3,0,17,13,13,4,4,16,18],[5,11,12,15,14,5,0,12,18,1,11,15,10,14,13,12,17,17,6,15,15,0,2,18,14,5,9,1,16,9,0,12,6,3,3,1,1,8,17,0,9],[12,11,12,2,13,2,15,10,9,1,13,1,18,14,3,11,9,5,3,2,11,7,1,4,16,9,1,15,18,18,8,16,10,1,4,6,11,9,3,13,0],[11,8,8,5,9,2,7,2,2,3,13,6,14,9,1,18,17,0,8,11,4,11,9,11,11,9,1,13,9,12,14,19,14,16,19,8,15,18,17,4,9],[13,9,19,8,15,3,15,7,2,19,17,2,13,10,19,0,1,4,9,15,5,13,14,16,1,14,11,0,8,19,6,17,17,7,17,18,12,12,9,12,15],[4,2,18,11,1,9,16,2,14,1,18,2,14,9,3,11,6,11,11,8,7,5,6,15,18,0,16,4,5,2,18,15,12,5,1,13,8,15,19,6,15],[17,11,12,1,12,18,3,15,2,16,8,6,17,0,11,11,12,10,9,7,7,19,18,18,7,6,18,0,3,1,7,8,7,10,3,5,2,18,15,19,6],[5,15,1,14,8,18,9,6,19,10,8,15,13,1,6,6,19,11,6,17,15,4,4,9,3,2,8,4,9,16,12,3,0,3,2,4,4,6,12,13,16],[17,1,17,10,10,5,0,9,11,4,7,3,0,7,2,1,10,16,10,0,14,2,19,13,4,14,6,18,4,13,17,4,2,1,16,9,2,18,1,0,15],[19,7,15,17,18,7,4,2,7,3,12,10,0,12,14,19,17,14,1,16,11,15,16,10,10,1,19,2,18,11,19,10,14,18,14,6,9,7,10,15,7],[17,4,18,10,5,9,4,18,18,5,10,19,14,4,5,3,0,14,16,12,8,3,9,19,0,16,2,3,10,17,12,1,18,12,7,5,15,10,14,11,10],[6,7,11,18,7,2,19,4,0,9,12,15,7,15,5,1,5,3,0,0,18,10,1,15,0,18,4,9,3,17,3,12,0,17,2,7,19,17,8,7,7],[6,3,8,12,17,16,16,9,8,4,5,4,8,7,8,8,13,0,11,6,2,5,10,0,13,6,10,17,8,0,11,17,9,16,0,6,18,19,19,1,9],[4,6,8,7,3,0,17,6,8,17,19,13,3,1,0,8,15,18,0,4,17,9,13,12,0,14,8,11,11,12,0,6,4,18,10,15,16,5,17,11,12],[12,16,17,11,17,18,16,2,11,2,3,13,13,11,9,14,10,3,0,9,19,17,3,19,2,17,3,16,1,6,2,1,14,6,19,18,10,13,10,2,14],[7,5,13,10,4,10,7,1,3,8,19,14,6,12,9,17,10,3,10,17,3,9,6,2,12,2,13,3,1,7,15,14,17,9,1,5,2,13,2,17,12],[15,2,15,19,5,6,15,9,0,1,0,16,6,0,9,12,3,6,6,14,9,2,15,14,16,5,6,3,0,19,9,5,6,6,15,14,18,4,0,17,6],[15,12,13,4,6,17,15,5,18,9,4,6,10,9,11,9,13,9,18,10,3,14,18,1,19,18,8,15,8,8,16,0,14,7,19,18,12,5,5,9,13],[17,16,0,0,13,3,9,12,10,11,10,1,2,9,11,1,12,14,12,16,4,11,18,15,2,12,10,7,1,13,2,14,17,1,9,11,14,3,0,16,4],[10,14,17,19,0,16,16,12,11,13,11,7,4,13,2,5,18,3,14,2,8,17,7,19,7,12,19,4,15,5,4,4,11,17,16,4,7,14,7,16,3],[10,2,10,7,9,15,7,8,5,10,6,13,2,11,1,2,12,9,16,18,4,19,18,2,7,2,10,16,14,0,2,6,11,8,3,8,5,14,2,2,11],[14,19,9,4,13,12,6,19,0,1,1,18,14,10,0,11,9,19,13,19,5,7,16,8,13,8,6,10,11,12,8,7,10,5,16,19,11,15,15,8,13],[7,7,14,18,12,4,7,4,2,2,6,12,14,5,2,10,9,2,15,14,2,18,12,15,7,18,0,11,4,10,10,7,10,14,13,17,11,18,2,0,3],[1,2,19,13,14,19,18,4,16,9,18,4,5,6,1,5,14,15,18,1,1,3,11,7,4,15,8,8,18,8,7,15,12,0,3,18,10,12,18,15,19],[3,1,5,19,9,6,19,9,7,16,7,10,6,4,13,17,19,15,15,0,1,12,5,7,3,16,14,5,17,9,17,16,2,13,6,10,13,4,5,2,12],[9,18,16,11,18,0,18,14,18,4,0,9,8,17,0,17,18,4,7,11,16,18,15,14,11,3,1,18,15,4,14,8,13,18,3,18,18,16,19,19,13],[10,15,12,18,11,13,2,17,14,8,0,2,7,11,10,12,8,12,12,14,3,1,8,4,2,15,11,3,18,0,19,15,18,11,2,3,16,14,3,17,18],[8,6,3,7,13,14,2,13,15,19,9,15,19,2,6,3,17,2,9,9,0,13,10,4,6,7,10,19,4,15,13,17,8,7,4,2,0,7,6,13,15],[19,1,2,19,2,18,5,7,14,13,10,12,1,16,16,3,19,19,0,19,15,7,7,2,8,12,1,14,17,0,13,6,16,9,10,1,11,18,8,7,13],[18,3,12,5,15,14,10,2,19,0,11,3,18,4,16,6,15,2,0,7,4,17,14,6,1,6,15,6,0,3,12,10,5,14,11,15,5,17,16,4,17],[14,15,18,9,11,1,12,10,15,5,17,6,13,2,1,6,11,7,7,2,0,18,2,13,6,10,19,15,2,3,2,10,14,4,1,5,5,5,9,9,4],[3,4,5,1,2,18,4,12,5,0,14,1,9,11,19,4,4,6,2,1,1,18,17,4,6,15,7,2,0,19,2,19,3,12,15,8,10,7,1,13,7],[8,5,19,17,14,2,19,2,19,4,6,16,9,3,9,8,16,13,14,11,0,16,10,16,16,14,19,10,17,3,18,7,9,3,1,19,3,10,15,8,7],[9,0,18,11,10,4,3,6,0,13,8,2,16,0,16,17,16,6,11,4,14,16,14,3,12,17,14,2,12,4,13,18,7,16,18,5,13,13,14,6,16],[10,13,0,0,6,8,6,15,9,7,13,5,6,7,11,12,9,9,7,19,6,3,3,5,15,13,13,17,9,10,19,5,10,17,5,8,7,3,4,16,7],[0,18,12,4,11,1,15,10,10,15,4,6,15,10,3,2,9,0,0,3,15,18,2,17,4,11,6,7,3,2,3,9,9,12,12,2,2,8,17,8,17],[0,2,8,16,0,8,8,12,15,10,19,5,6,1,15,6,5,9,18,13,9,0,15,2,4,16,5,11,4,18,18,4,7,1,6,16,13,2,19,16,12]]
        t1 = time()
        got = self.s.pacificAtlantic(matrix)
        t2 = time()
        print t2 - t1

if __name__ == "__main__":
    unittest.main()

